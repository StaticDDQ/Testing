Shader "Sky Shader"
{
    Properties
    {
        Vector4_95EEC348("RotateProjection", Vector) = (1,0,0,0)
Vector1_DE064AD3("NoiseScale", Float) = 10
Vector1_F12B9301("MoveSpeed", Float) = 0.1
Vector1_A341959("Displacement", Float) = 1
Vector4_D0429336("NoiseRemap", Vector) = (0,1,-1,1)
Color_B578ADBC("ColorPeak", Color) = (1,1,1,0)
Color_41264240("ColorValley", Color) = (0,0,0,0)
Vector1_50E1DDB9("SmoothEdge1", Float) = 0
Vector1_3FC04CE0("SmoothEdge2", Float) = 1
Vector1_57900D34("Power", Float) = 1
Vector1_80AC70B9("BaseScale", Float) = 5
Vector1_A9D8389F("BaseSpeed", Float) = 1
Vector1_BC8252EC("BaseStrength", Float) = 1
Vector1_4558365F("CurveRadius", Float) = 1
Vector1_CA083A9A("FresnelEffect", Float) = 1
Vector1_7AAE569E("FresnelOpacity", Float) = 1
Vector1_EBA79DF3("Transparency", Float) = 100
Vector1_5D58D0EB("FadeScreen", Float) = 1

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="LightweightPipeline"
            "RenderType"="Transparent"
            "Queue"="Transparent+0"
        }
        Pass
        {
            Name "StandardUnlit"
            Tags{"LightMode" = "LightweightForward"}

            // Material options generated by graph

            Blend SrcAlpha OneMinusSrcAlpha

            Cull Off

            ZTest LEqual

            ZWrite On

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            // -------------------------------------
            // Lightweight Pipeline keywords
            #pragma shader_feature _SAMPLE_GI

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            
            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            // Lighting include is needed because of GI
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/Shaders/UnlitInput.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_95EEC348;
            float Vector1_DE064AD3;
            float Vector1_F12B9301;
            float Vector1_A341959;
            float4 Vector4_D0429336;
            float4 Color_B578ADBC;
            float4 Color_41264240;
            float Vector1_50E1DDB9;
            float Vector1_3FC04CE0;
            float Vector1_57900D34;
            float Vector1_80AC70B9;
            float Vector1_A9D8389F;
            float Vector1_BC8252EC;
            float Vector1_4558365F;
            float Vector1_CA083A9A;
            float Vector1_7AAE569E;
            float Vector1_EBA79DF3;
            float Vector1_5D58D0EB;
            CBUFFER_END


            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceViewDirection;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                           one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                           one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                         };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
            {
                Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_3FD15530_Out;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.ObjectSpacePosition, _Distance_3FD15530_Out);
                float _Property_60BA134C_Out = Vector1_4558365F;
                float _Divide_C26B49C0_Out;
                Unity_Divide_float(_Distance_3FD15530_Out, _Property_60BA134C_Out, _Divide_C26B49C0_Out);
                float _Power_F8571B88_Out;
                Unity_Power_float(_Divide_C26B49C0_Out, 3, _Power_F8571B88_Out);
                float3 _Multiply_3CF5F8A3_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Power_F8571B88_Out.xxx), _Multiply_3CF5F8A3_Out);

                float _Property_D4F9DA9E_Out = Vector1_50E1DDB9;
                float _Property_B4D8D91A_Out = Vector1_3FC04CE0;
                float4 _Property_8629510A_Out = Vector4_95EEC348;
                float _Split_B21003DB_R = _Property_8629510A_Out[0];
                float _Split_B21003DB_G = _Property_8629510A_Out[1];
                float _Split_B21003DB_B = _Property_8629510A_Out[2];
                float _Split_B21003DB_A = _Property_8629510A_Out[3];
                float3 _RotateAboutAxis_E349DBD8_Out;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_8629510A_Out.xyz), _Split_B21003DB_A, _RotateAboutAxis_E349DBD8_Out);
                float _Property_342D15C9_Out = Vector1_F12B9301;
                float _Multiply_840D330D_Out;
                Unity_Multiply_float(_Time.y, _Property_342D15C9_Out, _Multiply_840D330D_Out);

                float2 _TilingAndOffset_30F1E0C2_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_840D330D_Out.xx), _TilingAndOffset_30F1E0C2_Out);
                float _Property_C1F533CF_Out = Vector1_DE064AD3;
                float _GradientNoise_1F5A3CC2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_30F1E0C2_Out, _Property_C1F533CF_Out, _GradientNoise_1F5A3CC2_Out);
                float2 _TilingAndOffset_A3B2B944_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), float2 (0,0), _TilingAndOffset_A3B2B944_Out);
                float _GradientNoise_E20C3623_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A3B2B944_Out, _Property_C1F533CF_Out, _GradientNoise_E20C3623_Out);
                float _Add_E8C4CEF_Out;
                Unity_Add_float(_GradientNoise_1F5A3CC2_Out, _GradientNoise_E20C3623_Out, _Add_E8C4CEF_Out);
                float _Divide_1E79DAED_Out;
                Unity_Divide_float(_Add_E8C4CEF_Out, 2, _Divide_1E79DAED_Out);
                float _Saturate_8E5A510F_Out;
                Unity_Saturate_float(_Divide_1E79DAED_Out, _Saturate_8E5A510F_Out);
                float _Property_54B36DE3_Out = Vector1_57900D34;
                float _Power_D8B7A361_Out;
                Unity_Power_float(_Saturate_8E5A510F_Out, _Property_54B36DE3_Out, _Power_D8B7A361_Out);
                float4 _Property_50DF8557_Out = Vector4_D0429336;
                float _Split_EF5CBF8E_R = _Property_50DF8557_Out[0];
                float _Split_EF5CBF8E_G = _Property_50DF8557_Out[1];
                float _Split_EF5CBF8E_B = _Property_50DF8557_Out[2];
                float _Split_EF5CBF8E_A = _Property_50DF8557_Out[3];
                float4 _Combine_7DA7A17F_RGBA;
                float3 _Combine_7DA7A17F_RGB;
                float2 _Combine_7DA7A17F_RG;
                Unity_Combine_float(_Split_EF5CBF8E_R, _Split_EF5CBF8E_G, 0, 0, _Combine_7DA7A17F_RGBA, _Combine_7DA7A17F_RGB, _Combine_7DA7A17F_RG);
                float4 _Combine_C0CE008E_RGBA;
                float3 _Combine_C0CE008E_RGB;
                float2 _Combine_C0CE008E_RG;
                Unity_Combine_float(_Split_EF5CBF8E_B, _Split_EF5CBF8E_A, 0, 0, _Combine_C0CE008E_RGBA, _Combine_C0CE008E_RGB, _Combine_C0CE008E_RG);
                float _Remap_DB4E5451_Out;
                Unity_Remap_float(_Power_D8B7A361_Out, _Combine_7DA7A17F_RG, _Combine_C0CE008E_RG, _Remap_DB4E5451_Out);
                float _Absolute_ECC57BAE_Out;
                Unity_Absolute_float(_Remap_DB4E5451_Out, _Absolute_ECC57BAE_Out);
                float _Smoothstep_8C21315A_Out;
                Unity_Smoothstep_float(_Property_D4F9DA9E_Out, _Property_B4D8D91A_Out, _Absolute_ECC57BAE_Out, _Smoothstep_8C21315A_Out);
                float _Property_EDEE5837_Out = Vector1_A9D8389F;
                float _Multiply_53C07884_Out;
                Unity_Multiply_float(_Time.y, _Property_EDEE5837_Out, _Multiply_53C07884_Out);

                float2 _TilingAndOffset_A4E5A188_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_53C07884_Out.xx), _TilingAndOffset_A4E5A188_Out);
                float _Property_3007FFBF_Out = Vector1_80AC70B9;
                float _GradientNoise_F2A986A2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A4E5A188_Out, _Property_3007FFBF_Out, _GradientNoise_F2A986A2_Out);
                float _Property_83CC51A3_Out = Vector1_BC8252EC;
                float _Multiply_EC347A9F_Out;
                Unity_Multiply_float(_GradientNoise_F2A986A2_Out, _Property_83CC51A3_Out, _Multiply_EC347A9F_Out);

                float _Add_B1E60B1D_Out;
                Unity_Add_float(_Smoothstep_8C21315A_Out, _Multiply_EC347A9F_Out, _Add_B1E60B1D_Out);
                float _Add_D167B2_Out;
                Unity_Add_float(1, _Property_83CC51A3_Out, _Add_D167B2_Out);
                float _Divide_6562C949_Out;
                Unity_Divide_float(_Add_B1E60B1D_Out, _Add_D167B2_Out, _Divide_6562C949_Out);
                float3 _Multiply_3C99B9C2_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_6562C949_Out.xxx), _Multiply_3C99B9C2_Out);

                float _Property_9BA24116_Out = Vector1_A341959;
                float3 _Multiply_DC15B576_Out;
                Unity_Multiply_float(_Multiply_3C99B9C2_Out, (_Property_9BA24116_Out.xxx), _Multiply_DC15B576_Out);

                float3 _Add_1573B682_Out;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_DC15B576_Out, _Add_1573B682_Out);
                float3 _Add_9C4EDBF3_Out;
                Unity_Add_float3(_Multiply_3CF5F8A3_Out, _Add_1573B682_Out, _Add_9C4EDBF3_Out);
                description.Position = _Add_9C4EDBF3_Out;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Color;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _Property_6F33E110_Out = Color_41264240;
                float4 _Property_78054CC2_Out = Color_B578ADBC;
                float _Property_D4F9DA9E_Out = Vector1_50E1DDB9;
                float _Property_B4D8D91A_Out = Vector1_3FC04CE0;
                float4 _Property_8629510A_Out = Vector4_95EEC348;
                float _Split_B21003DB_R = _Property_8629510A_Out[0];
                float _Split_B21003DB_G = _Property_8629510A_Out[1];
                float _Split_B21003DB_B = _Property_8629510A_Out[2];
                float _Split_B21003DB_A = _Property_8629510A_Out[3];
                float3 _RotateAboutAxis_E349DBD8_Out;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_8629510A_Out.xyz), _Split_B21003DB_A, _RotateAboutAxis_E349DBD8_Out);
                float _Property_342D15C9_Out = Vector1_F12B9301;
                float _Multiply_840D330D_Out;
                Unity_Multiply_float(_Time.y, _Property_342D15C9_Out, _Multiply_840D330D_Out);

                float2 _TilingAndOffset_30F1E0C2_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_840D330D_Out.xx), _TilingAndOffset_30F1E0C2_Out);
                float _Property_C1F533CF_Out = Vector1_DE064AD3;
                float _GradientNoise_1F5A3CC2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_30F1E0C2_Out, _Property_C1F533CF_Out, _GradientNoise_1F5A3CC2_Out);
                float2 _TilingAndOffset_A3B2B944_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), float2 (0,0), _TilingAndOffset_A3B2B944_Out);
                float _GradientNoise_E20C3623_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A3B2B944_Out, _Property_C1F533CF_Out, _GradientNoise_E20C3623_Out);
                float _Add_E8C4CEF_Out;
                Unity_Add_float(_GradientNoise_1F5A3CC2_Out, _GradientNoise_E20C3623_Out, _Add_E8C4CEF_Out);
                float _Divide_1E79DAED_Out;
                Unity_Divide_float(_Add_E8C4CEF_Out, 2, _Divide_1E79DAED_Out);
                float _Saturate_8E5A510F_Out;
                Unity_Saturate_float(_Divide_1E79DAED_Out, _Saturate_8E5A510F_Out);
                float _Property_54B36DE3_Out = Vector1_57900D34;
                float _Power_D8B7A361_Out;
                Unity_Power_float(_Saturate_8E5A510F_Out, _Property_54B36DE3_Out, _Power_D8B7A361_Out);
                float4 _Property_50DF8557_Out = Vector4_D0429336;
                float _Split_EF5CBF8E_R = _Property_50DF8557_Out[0];
                float _Split_EF5CBF8E_G = _Property_50DF8557_Out[1];
                float _Split_EF5CBF8E_B = _Property_50DF8557_Out[2];
                float _Split_EF5CBF8E_A = _Property_50DF8557_Out[3];
                float4 _Combine_7DA7A17F_RGBA;
                float3 _Combine_7DA7A17F_RGB;
                float2 _Combine_7DA7A17F_RG;
                Unity_Combine_float(_Split_EF5CBF8E_R, _Split_EF5CBF8E_G, 0, 0, _Combine_7DA7A17F_RGBA, _Combine_7DA7A17F_RGB, _Combine_7DA7A17F_RG);
                float4 _Combine_C0CE008E_RGBA;
                float3 _Combine_C0CE008E_RGB;
                float2 _Combine_C0CE008E_RG;
                Unity_Combine_float(_Split_EF5CBF8E_B, _Split_EF5CBF8E_A, 0, 0, _Combine_C0CE008E_RGBA, _Combine_C0CE008E_RGB, _Combine_C0CE008E_RG);
                float _Remap_DB4E5451_Out;
                Unity_Remap_float(_Power_D8B7A361_Out, _Combine_7DA7A17F_RG, _Combine_C0CE008E_RG, _Remap_DB4E5451_Out);
                float _Absolute_ECC57BAE_Out;
                Unity_Absolute_float(_Remap_DB4E5451_Out, _Absolute_ECC57BAE_Out);
                float _Smoothstep_8C21315A_Out;
                Unity_Smoothstep_float(_Property_D4F9DA9E_Out, _Property_B4D8D91A_Out, _Absolute_ECC57BAE_Out, _Smoothstep_8C21315A_Out);
                float _Property_EDEE5837_Out = Vector1_A9D8389F;
                float _Multiply_53C07884_Out;
                Unity_Multiply_float(_Time.y, _Property_EDEE5837_Out, _Multiply_53C07884_Out);

                float2 _TilingAndOffset_A4E5A188_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_53C07884_Out.xx), _TilingAndOffset_A4E5A188_Out);
                float _Property_3007FFBF_Out = Vector1_80AC70B9;
                float _GradientNoise_F2A986A2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A4E5A188_Out, _Property_3007FFBF_Out, _GradientNoise_F2A986A2_Out);
                float _Property_83CC51A3_Out = Vector1_BC8252EC;
                float _Multiply_EC347A9F_Out;
                Unity_Multiply_float(_GradientNoise_F2A986A2_Out, _Property_83CC51A3_Out, _Multiply_EC347A9F_Out);

                float _Add_B1E60B1D_Out;
                Unity_Add_float(_Smoothstep_8C21315A_Out, _Multiply_EC347A9F_Out, _Add_B1E60B1D_Out);
                float _Add_D167B2_Out;
                Unity_Add_float(1, _Property_83CC51A3_Out, _Add_D167B2_Out);
                float _Divide_6562C949_Out;
                Unity_Divide_float(_Add_B1E60B1D_Out, _Add_D167B2_Out, _Divide_6562C949_Out);
                float4 _Lerp_2EF7DCDE_Out;
                Unity_Lerp_float4(_Property_6F33E110_Out, _Property_78054CC2_Out, (_Divide_6562C949_Out.xxxx), _Lerp_2EF7DCDE_Out);
                float _Property_1DF4CAEA_Out = Vector1_CA083A9A;
                float _FresnelEffect_E11DD5BA_Out;
                Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_1DF4CAEA_Out, _FresnelEffect_E11DD5BA_Out);
                float _Multiply_2CFDA9CB_Out;
                Unity_Multiply_float(_Divide_6562C949_Out, _FresnelEffect_E11DD5BA_Out, _Multiply_2CFDA9CB_Out);

                float _Property_52697A97_Out = Vector1_7AAE569E;
                float _Multiply_C09AC32D_Out;
                Unity_Multiply_float(_Multiply_2CFDA9CB_Out, _Property_52697A97_Out, _Multiply_C09AC32D_Out);

                float4 _Add_313BA65E_Out;
                Unity_Add_float4(_Lerp_2EF7DCDE_Out, (_Multiply_C09AC32D_Out.xxxx), _Add_313BA65E_Out);
                float _SceneDepth_FB0271D3_Out;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_FB0271D3_Out);
                float4 _ScreenPosition_B48FD3FF_Out = IN.ScreenPosition;
                float _Split_2F5A708E_R = _ScreenPosition_B48FD3FF_Out[0];
                float _Split_2F5A708E_G = _ScreenPosition_B48FD3FF_Out[1];
                float _Split_2F5A708E_B = _ScreenPosition_B48FD3FF_Out[2];
                float _Split_2F5A708E_A = _ScreenPosition_B48FD3FF_Out[3];
                float _Property_A418977_Out = Vector1_5D58D0EB;
                float _Subtract_1E5C72E6_Out;
                Unity_Subtract_float(_Split_2F5A708E_A, _Property_A418977_Out, _Subtract_1E5C72E6_Out);
                float _Subtract_4A2A7FFC_Out;
                Unity_Subtract_float(_SceneDepth_FB0271D3_Out, _Subtract_1E5C72E6_Out, _Subtract_4A2A7FFC_Out);
                float _Property_A9B0A789_Out = Vector1_EBA79DF3;
                float _Divide_4FBC9250_Out;
                Unity_Divide_float(_Subtract_4A2A7FFC_Out, _Property_A9B0A789_Out, _Divide_4FBC9250_Out);
                float _Saturate_B300E5E1_Out;
                Unity_Saturate_float(_Divide_4FBC9250_Out, _Saturate_B300E5E1_Out);
                float _Smoothstep_81BCC726_Out;
                Unity_Smoothstep_float(0, 1, _Saturate_B300E5E1_Out, _Smoothstep_81BCC726_Out);
                surface.Color = (_Add_313BA65E_Out.xyz);
                surface.Alpha = _Smoothstep_81BCC726_Out;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct GraphVertexOutput
            {
                float4 position : POSITION;

                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
            {
                GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                o.position = TransformObjectToHClip(v.vertex.xyz);
                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                return o;
            }

            half4 frag (GraphVertexOutput IN ) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                
                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
                // Surface description inputs defined by graph
                surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
                surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;


                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
                float3 Color = float3(0.5, 0.5, 0.5);
                float Alpha = 1;
                float AlphaClipThreshold = 0;
                // Surface description remap performed by graph
                Color = surf.Color;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

                
         #if _AlphaClip
                clip(Alpha - AlphaClipThreshold);
        #endif
        #ifdef _ALPHAPREMULTIPLY_ON
                
                Color *= Alpha;
        #endif
                return half4(Color, Alpha);
            }
            ENDHLSL
        }
        Pass
        {
            Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_95EEC348;
            float Vector1_DE064AD3;
            float Vector1_F12B9301;
            float Vector1_A341959;
            float4 Vector4_D0429336;
            float4 Color_B578ADBC;
            float4 Color_41264240;
            float Vector1_50E1DDB9;
            float Vector1_3FC04CE0;
            float Vector1_57900D34;
            float Vector1_80AC70B9;
            float Vector1_A9D8389F;
            float Vector1_BC8252EC;
            float Vector1_4558365F;
            float Vector1_CA083A9A;
            float Vector1_7AAE569E;
            float Vector1_EBA79DF3;
            float Vector1_5D58D0EB;
            CBUFFER_END


            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                           one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                           one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                         };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_3FD15530_Out;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.ObjectSpacePosition, _Distance_3FD15530_Out);
                float _Property_60BA134C_Out = Vector1_4558365F;
                float _Divide_C26B49C0_Out;
                Unity_Divide_float(_Distance_3FD15530_Out, _Property_60BA134C_Out, _Divide_C26B49C0_Out);
                float _Power_F8571B88_Out;
                Unity_Power_float(_Divide_C26B49C0_Out, 3, _Power_F8571B88_Out);
                float3 _Multiply_3CF5F8A3_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Power_F8571B88_Out.xxx), _Multiply_3CF5F8A3_Out);

                float _Property_D4F9DA9E_Out = Vector1_50E1DDB9;
                float _Property_B4D8D91A_Out = Vector1_3FC04CE0;
                float4 _Property_8629510A_Out = Vector4_95EEC348;
                float _Split_B21003DB_R = _Property_8629510A_Out[0];
                float _Split_B21003DB_G = _Property_8629510A_Out[1];
                float _Split_B21003DB_B = _Property_8629510A_Out[2];
                float _Split_B21003DB_A = _Property_8629510A_Out[3];
                float3 _RotateAboutAxis_E349DBD8_Out;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_8629510A_Out.xyz), _Split_B21003DB_A, _RotateAboutAxis_E349DBD8_Out);
                float _Property_342D15C9_Out = Vector1_F12B9301;
                float _Multiply_840D330D_Out;
                Unity_Multiply_float(_Time.y, _Property_342D15C9_Out, _Multiply_840D330D_Out);

                float2 _TilingAndOffset_30F1E0C2_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_840D330D_Out.xx), _TilingAndOffset_30F1E0C2_Out);
                float _Property_C1F533CF_Out = Vector1_DE064AD3;
                float _GradientNoise_1F5A3CC2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_30F1E0C2_Out, _Property_C1F533CF_Out, _GradientNoise_1F5A3CC2_Out);
                float2 _TilingAndOffset_A3B2B944_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), float2 (0,0), _TilingAndOffset_A3B2B944_Out);
                float _GradientNoise_E20C3623_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A3B2B944_Out, _Property_C1F533CF_Out, _GradientNoise_E20C3623_Out);
                float _Add_E8C4CEF_Out;
                Unity_Add_float(_GradientNoise_1F5A3CC2_Out, _GradientNoise_E20C3623_Out, _Add_E8C4CEF_Out);
                float _Divide_1E79DAED_Out;
                Unity_Divide_float(_Add_E8C4CEF_Out, 2, _Divide_1E79DAED_Out);
                float _Saturate_8E5A510F_Out;
                Unity_Saturate_float(_Divide_1E79DAED_Out, _Saturate_8E5A510F_Out);
                float _Property_54B36DE3_Out = Vector1_57900D34;
                float _Power_D8B7A361_Out;
                Unity_Power_float(_Saturate_8E5A510F_Out, _Property_54B36DE3_Out, _Power_D8B7A361_Out);
                float4 _Property_50DF8557_Out = Vector4_D0429336;
                float _Split_EF5CBF8E_R = _Property_50DF8557_Out[0];
                float _Split_EF5CBF8E_G = _Property_50DF8557_Out[1];
                float _Split_EF5CBF8E_B = _Property_50DF8557_Out[2];
                float _Split_EF5CBF8E_A = _Property_50DF8557_Out[3];
                float4 _Combine_7DA7A17F_RGBA;
                float3 _Combine_7DA7A17F_RGB;
                float2 _Combine_7DA7A17F_RG;
                Unity_Combine_float(_Split_EF5CBF8E_R, _Split_EF5CBF8E_G, 0, 0, _Combine_7DA7A17F_RGBA, _Combine_7DA7A17F_RGB, _Combine_7DA7A17F_RG);
                float4 _Combine_C0CE008E_RGBA;
                float3 _Combine_C0CE008E_RGB;
                float2 _Combine_C0CE008E_RG;
                Unity_Combine_float(_Split_EF5CBF8E_B, _Split_EF5CBF8E_A, 0, 0, _Combine_C0CE008E_RGBA, _Combine_C0CE008E_RGB, _Combine_C0CE008E_RG);
                float _Remap_DB4E5451_Out;
                Unity_Remap_float(_Power_D8B7A361_Out, _Combine_7DA7A17F_RG, _Combine_C0CE008E_RG, _Remap_DB4E5451_Out);
                float _Absolute_ECC57BAE_Out;
                Unity_Absolute_float(_Remap_DB4E5451_Out, _Absolute_ECC57BAE_Out);
                float _Smoothstep_8C21315A_Out;
                Unity_Smoothstep_float(_Property_D4F9DA9E_Out, _Property_B4D8D91A_Out, _Absolute_ECC57BAE_Out, _Smoothstep_8C21315A_Out);
                float _Property_EDEE5837_Out = Vector1_A9D8389F;
                float _Multiply_53C07884_Out;
                Unity_Multiply_float(_Time.y, _Property_EDEE5837_Out, _Multiply_53C07884_Out);

                float2 _TilingAndOffset_A4E5A188_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_53C07884_Out.xx), _TilingAndOffset_A4E5A188_Out);
                float _Property_3007FFBF_Out = Vector1_80AC70B9;
                float _GradientNoise_F2A986A2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A4E5A188_Out, _Property_3007FFBF_Out, _GradientNoise_F2A986A2_Out);
                float _Property_83CC51A3_Out = Vector1_BC8252EC;
                float _Multiply_EC347A9F_Out;
                Unity_Multiply_float(_GradientNoise_F2A986A2_Out, _Property_83CC51A3_Out, _Multiply_EC347A9F_Out);

                float _Add_B1E60B1D_Out;
                Unity_Add_float(_Smoothstep_8C21315A_Out, _Multiply_EC347A9F_Out, _Add_B1E60B1D_Out);
                float _Add_D167B2_Out;
                Unity_Add_float(1, _Property_83CC51A3_Out, _Add_D167B2_Out);
                float _Divide_6562C949_Out;
                Unity_Divide_float(_Add_B1E60B1D_Out, _Add_D167B2_Out, _Divide_6562C949_Out);
                float3 _Multiply_3C99B9C2_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_6562C949_Out.xxx), _Multiply_3C99B9C2_Out);

                float _Property_9BA24116_Out = Vector1_A341959;
                float3 _Multiply_DC15B576_Out;
                Unity_Multiply_float(_Multiply_3C99B9C2_Out, (_Property_9BA24116_Out.xxx), _Multiply_DC15B576_Out);

                float3 _Add_1573B682_Out;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_DC15B576_Out, _Add_1573B682_Out);
                float3 _Add_9C4EDBF3_Out;
                Unity_Add_float3(_Multiply_3CF5F8A3_Out, _Add_1573B682_Out, _Add_9C4EDBF3_Out);
                description.Position = _Add_9C4EDBF3_Out;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_FB0271D3_Out;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_FB0271D3_Out);
                float4 _ScreenPosition_B48FD3FF_Out = IN.ScreenPosition;
                float _Split_2F5A708E_R = _ScreenPosition_B48FD3FF_Out[0];
                float _Split_2F5A708E_G = _ScreenPosition_B48FD3FF_Out[1];
                float _Split_2F5A708E_B = _ScreenPosition_B48FD3FF_Out[2];
                float _Split_2F5A708E_A = _ScreenPosition_B48FD3FF_Out[3];
                float _Property_A418977_Out = Vector1_5D58D0EB;
                float _Subtract_1E5C72E6_Out;
                Unity_Subtract_float(_Split_2F5A708E_A, _Property_A418977_Out, _Subtract_1E5C72E6_Out);
                float _Subtract_4A2A7FFC_Out;
                Unity_Subtract_float(_SceneDepth_FB0271D3_Out, _Subtract_1E5C72E6_Out, _Subtract_4A2A7FFC_Out);
                float _Property_A9B0A789_Out = Vector1_EBA79DF3;
                float _Divide_4FBC9250_Out;
                Unity_Divide_float(_Subtract_4A2A7FFC_Out, _Property_A9B0A789_Out, _Divide_4FBC9250_Out);
                float _Saturate_B300E5E1_Out;
                Unity_Saturate_float(_Divide_4FBC9250_Out, _Saturate_B300E5E1_Out);
                float _Smoothstep_81BCC726_Out;
                Unity_Smoothstep_float(0, 1, _Saturate_B300E5E1_Out, _Smoothstep_81BCC726_Out);
                surface.Alpha = _Smoothstep_81BCC726_Out;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
            {
                VertexOutput o;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                
                float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

            #if UNITY_REVERSED_Z
                clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #else
                clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #endif
                o.clipPos = clipPos;

                return o;
            }

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
            Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Vector4_95EEC348;
            float Vector1_DE064AD3;
            float Vector1_F12B9301;
            float Vector1_A341959;
            float4 Vector4_D0429336;
            float4 Color_B578ADBC;
            float4 Color_41264240;
            float Vector1_50E1DDB9;
            float Vector1_3FC04CE0;
            float Vector1_57900D34;
            float Vector1_80AC70B9;
            float Vector1_A9D8389F;
            float Vector1_BC8252EC;
            float Vector1_4558365F;
            float Vector1_CA083A9A;
            float Vector1_7AAE569E;
            float Vector1_EBA79DF3;
            float Vector1_5D58D0EB;
            CBUFFER_END


            struct VertexDescriptionInputs
            {
                float3 ObjectSpaceNormal;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Distance_float3(float3 A, float3 B, out float Out)
            {
                Out = distance(A, B);
            }

            void Unity_Divide_float(float A, float B, out float Out)
            {
                Out = A / B;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
            {
                Rotation = radians(Rotation);

                float s = sin(Rotation);
                float c = cos(Rotation);
                float one_minus_c = 1.0 - c;
                
                Axis = normalize(Axis);

                float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                           one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                           one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                         };

                Out = mul(rot_mat,  In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Absolute_float(float In, out float Out)
            {
                Out = abs(In);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Distance_3FD15530_Out;
                Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.ObjectSpacePosition, _Distance_3FD15530_Out);
                float _Property_60BA134C_Out = Vector1_4558365F;
                float _Divide_C26B49C0_Out;
                Unity_Divide_float(_Distance_3FD15530_Out, _Property_60BA134C_Out, _Divide_C26B49C0_Out);
                float _Power_F8571B88_Out;
                Unity_Power_float(_Divide_C26B49C0_Out, 3, _Power_F8571B88_Out);
                float3 _Multiply_3CF5F8A3_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Power_F8571B88_Out.xxx), _Multiply_3CF5F8A3_Out);

                float _Property_D4F9DA9E_Out = Vector1_50E1DDB9;
                float _Property_B4D8D91A_Out = Vector1_3FC04CE0;
                float4 _Property_8629510A_Out = Vector4_95EEC348;
                float _Split_B21003DB_R = _Property_8629510A_Out[0];
                float _Split_B21003DB_G = _Property_8629510A_Out[1];
                float _Split_B21003DB_B = _Property_8629510A_Out[2];
                float _Split_B21003DB_A = _Property_8629510A_Out[3];
                float3 _RotateAboutAxis_E349DBD8_Out;
                Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_8629510A_Out.xyz), _Split_B21003DB_A, _RotateAboutAxis_E349DBD8_Out);
                float _Property_342D15C9_Out = Vector1_F12B9301;
                float _Multiply_840D330D_Out;
                Unity_Multiply_float(_Time.y, _Property_342D15C9_Out, _Multiply_840D330D_Out);

                float2 _TilingAndOffset_30F1E0C2_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_840D330D_Out.xx), _TilingAndOffset_30F1E0C2_Out);
                float _Property_C1F533CF_Out = Vector1_DE064AD3;
                float _GradientNoise_1F5A3CC2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_30F1E0C2_Out, _Property_C1F533CF_Out, _GradientNoise_1F5A3CC2_Out);
                float2 _TilingAndOffset_A3B2B944_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), float2 (0,0), _TilingAndOffset_A3B2B944_Out);
                float _GradientNoise_E20C3623_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A3B2B944_Out, _Property_C1F533CF_Out, _GradientNoise_E20C3623_Out);
                float _Add_E8C4CEF_Out;
                Unity_Add_float(_GradientNoise_1F5A3CC2_Out, _GradientNoise_E20C3623_Out, _Add_E8C4CEF_Out);
                float _Divide_1E79DAED_Out;
                Unity_Divide_float(_Add_E8C4CEF_Out, 2, _Divide_1E79DAED_Out);
                float _Saturate_8E5A510F_Out;
                Unity_Saturate_float(_Divide_1E79DAED_Out, _Saturate_8E5A510F_Out);
                float _Property_54B36DE3_Out = Vector1_57900D34;
                float _Power_D8B7A361_Out;
                Unity_Power_float(_Saturate_8E5A510F_Out, _Property_54B36DE3_Out, _Power_D8B7A361_Out);
                float4 _Property_50DF8557_Out = Vector4_D0429336;
                float _Split_EF5CBF8E_R = _Property_50DF8557_Out[0];
                float _Split_EF5CBF8E_G = _Property_50DF8557_Out[1];
                float _Split_EF5CBF8E_B = _Property_50DF8557_Out[2];
                float _Split_EF5CBF8E_A = _Property_50DF8557_Out[3];
                float4 _Combine_7DA7A17F_RGBA;
                float3 _Combine_7DA7A17F_RGB;
                float2 _Combine_7DA7A17F_RG;
                Unity_Combine_float(_Split_EF5CBF8E_R, _Split_EF5CBF8E_G, 0, 0, _Combine_7DA7A17F_RGBA, _Combine_7DA7A17F_RGB, _Combine_7DA7A17F_RG);
                float4 _Combine_C0CE008E_RGBA;
                float3 _Combine_C0CE008E_RGB;
                float2 _Combine_C0CE008E_RG;
                Unity_Combine_float(_Split_EF5CBF8E_B, _Split_EF5CBF8E_A, 0, 0, _Combine_C0CE008E_RGBA, _Combine_C0CE008E_RGB, _Combine_C0CE008E_RG);
                float _Remap_DB4E5451_Out;
                Unity_Remap_float(_Power_D8B7A361_Out, _Combine_7DA7A17F_RG, _Combine_C0CE008E_RG, _Remap_DB4E5451_Out);
                float _Absolute_ECC57BAE_Out;
                Unity_Absolute_float(_Remap_DB4E5451_Out, _Absolute_ECC57BAE_Out);
                float _Smoothstep_8C21315A_Out;
                Unity_Smoothstep_float(_Property_D4F9DA9E_Out, _Property_B4D8D91A_Out, _Absolute_ECC57BAE_Out, _Smoothstep_8C21315A_Out);
                float _Property_EDEE5837_Out = Vector1_A9D8389F;
                float _Multiply_53C07884_Out;
                Unity_Multiply_float(_Time.y, _Property_EDEE5837_Out, _Multiply_53C07884_Out);

                float2 _TilingAndOffset_A4E5A188_Out;
                Unity_TilingAndOffset_float((_RotateAboutAxis_E349DBD8_Out.xy), float2 (1,1), (_Multiply_53C07884_Out.xx), _TilingAndOffset_A4E5A188_Out);
                float _Property_3007FFBF_Out = Vector1_80AC70B9;
                float _GradientNoise_F2A986A2_Out;
                Unity_GradientNoise_float(_TilingAndOffset_A4E5A188_Out, _Property_3007FFBF_Out, _GradientNoise_F2A986A2_Out);
                float _Property_83CC51A3_Out = Vector1_BC8252EC;
                float _Multiply_EC347A9F_Out;
                Unity_Multiply_float(_GradientNoise_F2A986A2_Out, _Property_83CC51A3_Out, _Multiply_EC347A9F_Out);

                float _Add_B1E60B1D_Out;
                Unity_Add_float(_Smoothstep_8C21315A_Out, _Multiply_EC347A9F_Out, _Add_B1E60B1D_Out);
                float _Add_D167B2_Out;
                Unity_Add_float(1, _Property_83CC51A3_Out, _Add_D167B2_Out);
                float _Divide_6562C949_Out;
                Unity_Divide_float(_Add_B1E60B1D_Out, _Add_D167B2_Out, _Divide_6562C949_Out);
                float3 _Multiply_3C99B9C2_Out;
                Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_6562C949_Out.xxx), _Multiply_3C99B9C2_Out);

                float _Property_9BA24116_Out = Vector1_A341959;
                float3 _Multiply_DC15B576_Out;
                Unity_Multiply_float(_Multiply_3C99B9C2_Out, (_Property_9BA24116_Out.xxx), _Multiply_DC15B576_Out);

                float3 _Add_1573B682_Out;
                Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_DC15B576_Out, _Add_1573B682_Out);
                float3 _Add_9C4EDBF3_Out;
                Unity_Add_float3(_Multiply_3CF5F8A3_Out, _Add_1573B682_Out, _Add_9C4EDBF3_Out);
                description.Position = _Add_9C4EDBF3_Out;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_FB0271D3_Out;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_FB0271D3_Out);
                float4 _ScreenPosition_B48FD3FF_Out = IN.ScreenPosition;
                float _Split_2F5A708E_R = _ScreenPosition_B48FD3FF_Out[0];
                float _Split_2F5A708E_G = _ScreenPosition_B48FD3FF_Out[1];
                float _Split_2F5A708E_B = _ScreenPosition_B48FD3FF_Out[2];
                float _Split_2F5A708E_A = _ScreenPosition_B48FD3FF_Out[3];
                float _Property_A418977_Out = Vector1_5D58D0EB;
                float _Subtract_1E5C72E6_Out;
                Unity_Subtract_float(_Split_2F5A708E_A, _Property_A418977_Out, _Subtract_1E5C72E6_Out);
                float _Subtract_4A2A7FFC_Out;
                Unity_Subtract_float(_SceneDepth_FB0271D3_Out, _Subtract_1E5C72E6_Out, _Subtract_4A2A7FFC_Out);
                float _Property_A9B0A789_Out = Vector1_EBA79DF3;
                float _Divide_4FBC9250_Out;
                Unity_Divide_float(_Subtract_4A2A7FFC_Out, _Property_A9B0A789_Out, _Divide_4FBC9250_Out);
                float _Saturate_B300E5E1_Out;
                Unity_Saturate_float(_Divide_4FBC9250_Out, _Saturate_B300E5E1_Out);
                float _Smoothstep_81BCC726_Out;
                Unity_Smoothstep_float(0, 1, _Saturate_B300E5E1_Out, _Smoothstep_81BCC726_Out);
                surface.Alpha = _Smoothstep_81BCC726_Out;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;
                float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpaceNormal = ObjectSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                o.clipPos = TransformObjectToHClip(v.vertex.xyz);
                return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/InternalErrorShader"
}
